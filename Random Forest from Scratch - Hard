import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score
from tqdm import tqdm

np.random.seed(52)


def convert_embarked(x):
    if x == 'S':
        return 0
    elif x == 'C':
        return 1
    else:
        return 2


class RandomForestClassifier:
    def __init__(self, n_trees=10, max_depth=np.iinfo(np.int64).max, min_error=1e-6):
        self.n_trees = n_trees
        self.max_depth = max_depth
        self.min_error = min_error
        self.forest = []
        self.is_fit = False

    def fit(self, X_train, y_train):
        for _ in range(self.n_trees):
            X_bootstrap, y_bootstrap = self.create_bootstrap(X_train, y_train)
            tree = DecisionTreeClassifier(
                max_features='sqrt',
                max_depth=self.max_depth,
                min_impurity_decrease=self.min_error
            )
            tree.fit(X_bootstrap, y_bootstrap)
            self.forest.append(tree)
        self.is_fit = True

    def predict(self, X_test):
        if not self.is_fit:
            raise AttributeError('The forest is not fit yet! Consider calling .fit() method.')

        predictions = np.array([tree.predict(X_test) for tree in self.forest])
        majority_vote = np.sum(predictions, axis=0) / self.n_trees
        final_predictions = np.where(majority_vote == 0.5, 0, np.round(majority_vote)).astype(int)

        return final_predictions

    @staticmethod
    def create_bootstrap(X, y):
        n_samples = len(X)
        mask = np.random.choice(n_samples, size=n_samples, replace=True)
        return X[mask], y[mask]


if __name__ == '__main__':
    data = pd.read_csv('https://www.dropbox.com/s/4vu5j6ahk2j3ypk/titanic_train.csv?dl=1')
    data.drop(['PassengerId', 'Name', 'Ticket', 'Cabin'], axis=1, inplace=True)
    data.dropna(inplace=True)

    y = data['Survived'].astype(int)
    X = data.drop('Survived', axis=1)

    X['Sex'] = X['Sex'].apply(lambda x: 0 if x == 'male' else 1)
    X['Embarked'] = X['Embarked'].apply(lambda x: convert_embarked(x))

    X_train, X_test, y_train, y_test = train_test_split(X.values, y.values, stratify=y, test_size=0.2, random_state=52)

    accuracies = []

    for n_trees in tqdm(range(1, 601)):
        rf = RandomForestClassifier(n_trees=n_trees)
        rf.fit(X_train, y_train)
        predictions = rf.predict(X_test)
        accuracy = accuracy_score(y_test, predictions)
        accuracies.append(round(accuracy, 3))

    print(accuracies[:20])

    # Optional: Plot the results
    # import matplotlib.pyplot as plt
    # plt.plot(range(1, 601), accuracies)
    # plt.xlabel('Number of Trees')
    # plt.ylabel('Accuracy')
    # plt.title('Random Forest Accuracy vs Number of Trees')
    # plt.show()
